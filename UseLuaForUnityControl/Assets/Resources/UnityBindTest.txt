--Unity側から呼ばれ、Unity側の処理を呼び出す--Unity〜というのは、Unity側から関数の登録がされていないと使えない（というか、処理がない）

QuestCount = 5
ScreenWidth = ""
ScreenHeight = ""
StreamingDataPath = ""
PersistentDataPath = ""
CanvasFactor = 0.0

IsLoading = false

--StreamingAssets内にある、Lua用分割スクリプト。最終的には、ここはアセットバンドルから読み込むことになるはず
LuaFileList = {
	"LuaUtility.lua",
	"LuaUtility2.txt",
	"BulletManager.lua",
	"EnemyManager.lua"
}
LuaFileLoadedCount = 0

--
function LuaUnityLoadFileAsync(loadPath, savePath, callbackName)
	UnityLoadFileAsync(loadPath, savePath, callbackName)
end

function LoadCallbackTest()
	LuaUnityDebugLog("CallBack!!")
	LuaSetText("DebugDisplayText", PersistentDataPath)
	dofile(PersistentDataPath.."/LuaUtility.lua")
	res1 = ReturnIntValue()
	res2 = ReturnStringValue()
	testClass = TestClassObject.new("TestClassName")
	LuaUnityDebugLog("value:"..res1..res2..testClass.GetName(testClass))
	TestClassDebugLog()
end

function LoadCallbackTest2()
	LuaUnityDebugLog("CallBack2!!")
	LuaSetText("DebugDisplayText", PersistentDataPath)
	dofile(PersistentDataPath.."/LuaUtility2.txt")
	res1 = GetNoNameValue()
	testClass = NoNameClassObject.new("NoNameClassObject")
	LuaUnityDebugLog("value:"..res1..testClass.GetName(testClass))
end

--LuaのMain関数みたいな奴
function LuaMain()
	LuaChangeScene("Title", "MainCanvas")
	LuaLoadPrefabAfter("Prefabs/System/FadeObject", "", "SystemCanvas")
	LuaLoadPrefabAfter("Prefabs/System/LoadingTextObject", "", "SystemCanvas")
	LuaLoadPrefabAfter("Prefabs/HeaderObject", "", "HeaderFooterCanvas")
	LuaLoadPrefabAfter("Prefabs/FooterObject", "", "HeaderFooterCanvas")
	LuaSetActive("FadeObject", false)
	LuaSetActive("HeaderObject", false)
	LuaSetActive("FooterObject", false)
	LuaSetActive("LoadingTextObject", false)
	LuaLoadPrefabAfter("Prefabs/System/DebugDisplayObject", "", "SystemCanvas")
	LuaFindObject("DebugDisplayText")
end

--ゲームの情報
function SetUnityGameData(screenWidth, screenHeight, canvasFactor, streamingDataPath, persistentDataPath)
	ScreenWidth = screenWidth
	ScreenHeight = screenHeight
	CanvasFactor = canvasFactor
	StreamingDataPath = streamingDataPath 
	PersistentDataPath = persistentDataPath
	
	--LuaUnityLoadFileAsync(StreamingDataPath.."/LuaUtility.lua", PersistentDataPath.."/LuaUtility.lua", "LoadCallbackTest")
	--LuaUnityLoadFileAsync(StreamingDataPath.."/LuaUtility2.txt", PersistentDataPath.."/LuaUtility2.txt", "LoadCallbackTest2")
	
end

--Luaの分割ファイル読み込み
function LoadAllLuaScript()
	local fileCount = #LuaFileList
	if LuaFileLoadedCount < fileCount then
		index = LuaFileLoadedCount + 1
		loadPath = StreamingDataPath.."/"..LuaFileList[index]
		savePath = PersistentDataPath.."/"..LuaFileList[index]
		LuaUnityLoadFileAsync(loadPath, savePath, "LoadAllLuaScriptCallback")
	else
		--BulletManager.Instance():Initialize()
		--value = BulletManager.Instance():GetShootInterval()
		--LuaUnityDebugLog(value)
		--BulletManager.Instance():SetShootInterval(1.775)
		--value = BulletManager.Instance():GetShootInterval()
		--LuaUnityDebugLog(value)
		
		LuaChangeScene("Home", "MainCanvas")
		LuaSetActive("HeaderObject", true)
		LuaSetActive("FooterObject", true)
	end
end

--Luaの分割ファイル読み込み
function LoadAllLuaScriptCallback()
	index = LuaFileLoadedCount+1
	dofile(PersistentDataPath.."/"..LuaFileList[index])
	LuaFileLoadedCount = LuaFileLoadedCount + 1
	UpdateLoadingData()
	LoadAllLuaScript()
end

function UpdateLoadingData()
	barRate = LuaFileLoadedCount / #LuaFileList
	LuaSetScale("LoadingAllLoadingGaugeBar", barRate, 1.0, 1.0)
	--LuaSetScale("LoadingCurrentLoadingGaugeBar", 0.0, 1.0, 1.0)
	LuaSetText("LoadingLoadedValueText", LuaFileLoadedCount)
	LuaSetText("LoadingMaxValueText", #LuaFileList)
end

function LuaUnityDebugLog(log)
	UnityDebugLog(log)
end

--オブジェクト破棄
--引数：ヒエラルキに登録しているオブジェクト名を指定する
--結果：Unity側のヒエラルキオブジェクトディクショナリから削除する
function LuaDestroyObject(hierarchyName)
	UnityDestroyObject(hierarchyName)
end

--オブジェクト検索
--引数：ヒエラルキに登録しているオブジェクト名を指定する
--結果：Unity側のヒエラルキオブジェクトディクショナリに登録されて、アクセス可能になる
function LuaFindObject(hierarchyName)
	UnityFindObject(hierarchyName)
end

--テキスト設定
--引数：ヒエラルキに登録しているオブジェクト名と、設定する文字列
function LuaSetText(hierarchyName, text)
	UnitySetText(hierarchyName, text)
end

--アニメーション再生
--引数：オブジェクト名、アニメーション名、アニメーションが終わった後のLua側のコールバック関数名
function LuaPlayAnimator(hierarchyName, animationName, isLoop, isAutoActiveFalse, callbackMethodName)
	UnityPlayAnimator(hierarchyName, animationName, isLoop, isAutoActiveFalse, callbackMethodName)
end

--シーンオブジェクトの切り替え
--引数：シーン名、SetParentしたい親のオブジェクト名
function LuaChangeScene(sceneName, parentHierarchyName)
	UnityChangeScene(sceneName, parentHierarchyName)
end

--座標の設定
--引数：hierarchy名と、x,y,zの座標
function LuaSetPosition(hierarchyName, x, y, z)
	UnitySetPosition(hierarchyName, x, y, z)
end

--ローテーションの設定
--引数：hierarchy名と、x,y,zの回転角度(degree)
function LuaSetRotate(hierarchyName, x, y, z)
	UnitySetRotate(hierarchyName, x, y, z)
end

--スケールの設定
--引数：hierarchy名と、x,y,zの拡大率
function LuaSetScale(hierarchyName, x, y, z)
	UnitySetScale(hierarchyName, x, y, z)
end

--アクティブの切り替え
--引数：
function LuaSetActive(hierarchyName, active)
	UnitySetActive(hierarchyName, active)
end

--プレハブをロードするだけ
function LuaLoadPrefabAfter(prefabPath, hierarchyName, parentHierarchyName)
	UnityLoadPrefabAfter(prefabPath, hierarchyName, parentHierarchyName)
end

--プレハブのロード
function LuaLoadPrefab(prefabName)
	UnityLoadPrefab(prefabName)
end

--シーンの切り替え
function LuaLoadLevel(sceneName)
	UnityLoadLevel(sceneName)
end

--他のLuaの関数を呼び出す
function LuaCallLuaFunction(fileName, functionName)
	UnityCallLuaFunction(fileName, functionName)
end

--基本Lua関数を使えるようにする
function LuaBindCommonFunction(fileName)
	UnityBindCommonFunction(fileName)
end

--Luaファイルを読み込んで、アクセスできる状態にする
function LoadLuaFile(filename)
	UnityLoadLuaFile(filename)
end

--Unity側から呼び出される。Event系の関数
function EventClickButton(eventName)
	if eventName == "TitleSceneGoHomeButton" then
		LuaPlayAnimator("FadeObject", "FadeIn", false, false, "TitleScene_ClickHome_Callback")
	elseif eventName == "HomeButton" then
		LuaPlayAnimator("FadeObject", "FadeIn", false, false, "Footer_ClickHome_Callback")
	elseif eventName == "CustomButton" then
		LuaPlayAnimator("FadeObject", "FadeIn", false, false, "Footer_ClickCustom_Callback")
	elseif eventName == "QuestButton" then
		LuaPlayAnimator("FadeObject", "FadeIn", false, false, "Footer_ClickQuest_Callback")
	elseif eventName == "OptionButton" then
		LuaPlayAnimator("FadeObject", "FadeIn", false, false, "Footer_ClickOption_Callback")
	elseif eventName == "QuestSelectListNode1" then
		LuaPlayAnimator("FadeObject", "FadeIn", false, false, "QuestScene_ClickButton_Callback")
	elseif eventName == "BattleOptionButton" then
		LuaPlayAnimator("FadeObject", "FadeIn", false, false, "BattleScene_ClickBackButton_Callback")
	end
end

--タイトルシーン関数
--ホームへ行く
function TitleScene_ClickHome_Callback()
	LuaPlayAnimator("LoadingTextObject", "Play", true, false, "")
	LuaChangeScene("Loading", "MainCanvas")
	LuaFindObject("LoadingAllLoadingGaugeBar")
	--LuaFindObject("LoadingCurrentLoadingGaugeBar")
	LuaFindObject("LoadingLoadedValueText")
	LuaFindObject("LoadingMaxValueText")

	UpdateLoadingData()
	LoadAllLuaScript()

	--LuaChangeScene("Home", "MainCanvas")
	--LuaSetActive("HeaderObject", true)
	--LuaSetActive("FooterObject", true)
	LuaPlayAnimator("FadeObject", "FadeOut", false, true, "")
end

--フッターボタン関数
function Footer_ClickHome_Callback()
	LuaChangeScene("Home", "MainCanvas")
	LuaPlayAnimator("FadeObject", "FadeOut", false, true, "")
end
function Footer_ClickCustom_Callback()
	LuaChangeScene("Custom", "MainCanvas")
	LuaPlayAnimator("FadeObject", "FadeOut", false, true, "")
end
function Footer_ClickQuest_Callback()
	LuaChangeScene("Quest", "MainCanvas")
	LuaFindObject("QuestScrollContent")
	for i = 1, QuestCount do
		LuaDestroyObject("QuestSelectListNode"..i, "QuestScrollContent")
	end

	for i = 1, QuestCount do
		LuaLoadPrefabAfter("Prefabs/QuestSelectListNode", "QuestSelectListNode"..i, "QuestScrollContent")
		LuaSetActive("QuestSelectListNode"..i, true)
	end
	LuaPlayAnimator("FadeObject", "FadeOut", false, true, "")
end
function Footer_ClickOption_Callback()
	LuaChangeScene("Option", "MainCanvas")
	LuaPlayAnimator("FadeObject", "FadeOut", false, true, "")
end

--クエストシーン関数
function QuestScene_ClickButton_Callback()
	LuaChangeScene("Battle", "MainCanvas")
	BulletManager.Instance():Initialize()
	LuaSetActive("HeaderObject", false)
	LuaSetActive("FooterObject", false)
	LuaPlayAnimator("FadeObject", "FadeOut", false, true, "")
end

--バトルシーン関数
function BattleScene_ClickBackButton_Callback()
	LuaChangeScene("Home", "MainCanvas")
	LuaSetActive("HeaderObject", true)
	LuaSetActive("FooterObject", true)
	LuaFindObject("PlayerCharacter")
	LuaFindObject("PlayerBulletRoot")
	LuaFindObject("EnemyObjectRoot")
	LuaPlayAnimator("FadeObject", "FadeOut", false, true, "")
end

function BattleOnMouseDown(touchx, touchy)
	local offsetx = touchx - (ScreenWidth/2)
	local offsety = touchy - (ScreenHeight/2)

	local radian = math.atan2(offsety, offsetx)
	local degree = radian * 180 / 3.1415
	LuaSetRotate("PlayerCharacter", 0, 0, degree-90)

	--テスト
	--SpawnEnemy(touchx, touchy, degree)
end

function SpawnEnemy(posx, posy, degree)
	EnemyManager.Instance():CreateEnemy(posx, posy, degree)
end

function BattleOnMouseDrag(touchx, touchy)
	local offsetx = touchx - (ScreenWidth/2)
	local offsety = touchy - (ScreenHeight/2)

	local radian = math.atan2(offsety, offsetx)
	local degree = radian * 180 / 3.1415
	LuaSetRotate("PlayerCharacter", 0, 0, degree-90)
	
	BulletManager.Instance():CreateBullet(touchx, touchy, degree-90);
end

--Unity側から呼ばれる、更新関数
function BattleUpdate(deltaTime)
	BulletManager.Instance():Update(deltaTime)
	EnemyManager.Instance():Update(deltaTime)
	CheckBump()
end

--当たり判定
function CheckBump()
	playerBulletList = BulletManager.Instance():GetList()
	enemyList = EnemyManager.Instance():GetList()

	bulletIndex = 1
	while true do
		if bulletIndex <= #playerBulletList then
			enemyIndex = 1
			while true do
				if enemyIndex <= #enemyList then
					enemyX, enemyY, enemyZ = enemyList[enemyIndex]:GetPosition()
					enemyWidth, enemyHeight = enemyList[enemyIndex]:GetSize()

					bullet = playerBulletList[bulletIndex]
					enemy = enemyList[enemyIndex]
					
					bulletX, bulletY, bulletZ = bullet:GetPosition()
					bulletWidth, bulletHeight = bullet:GetSize()

					isHit = IsHit(enemyX, enemyY, enemyWidth, enemyHeight, bulletX, bulletY, bulletWidth, bulletHeight)

					if isHit == true then
						--LuaUnityDebugLog("IsHit!!!!!")
						LuaDestroyObject(enemy:GetName())
						table.remove(enemyList, enemyIndex)
					else
						enemyIndex = enemyIndex + 1
					end
				else
					break
				end
			end
			bulletIndex = bulletIndex + 1
		else
			break
		end
	end
end

function IsHit(leftPosX, leftPosY, leftWidth, leftHeight, rightPosX, rightPosY, rightWidth, rightHeight)
	x = 1
	y = 2

	leftTL = {leftPosX-leftWidth/2, leftPosY+leftHeight/2}
	leftTR = {leftPosX+leftWidth/2, leftPosY+leftHeight/2}
	leftBL = {leftPosX-leftWidth/2, leftPosY-leftHeight/2}
	leftBR = {leftPosX+leftWidth/2, leftPosY-leftHeight/2}
	
	rightTL = {rightPosX-rightWidth/2, rightPosY+rightHeight/2}
	rightTR = {rightPosX+rightWidth/2, rightPosY+rightHeight/2}
	rightBL = {rightPosX-rightWidth/2, rightPosY-rightHeight/2}
	rightBR = {rightPosX+rightWidth/2, rightPosY-rightHeight/2}

	
	--左オブジェクトの左上が、右オブジェクトの範囲内に入っているかどうか
	--x座標が範囲内か確認
	if (leftTL[x] >= rightTL[x] and leftTL[x] <= rightTR[x]) then
		--y座標が範囲内か確認
		if (leftTL[y] <= rightTL[y] and leftTL[y] >= rightBL[y]) then
			return true
		end
	end
	
	--左オブジェクトの右上が、右オブジェクトの範囲内に入っているかどうか
	--x座標が範囲内か確認
	if (leftTR[x] >= rightTL[x] and leftTR[x] <= rightTR[x]) then
		--y座標が範囲内か確認
		if (leftTR[y] <= rightTR[y] and leftTR[y] >= rightBR[y]) then
			return true
		end
	end

	--左オブジェクトの左下が、右オブジェクトの範囲内に入っているかどうか
	--x座標が範囲内か確認
	if (leftBL[x] >= rightBL[x] and leftBL[x] <= rightBR[x]) then
		--y座標が範囲内か確認
		if (leftBL[y] <= rightTL[y] and leftBL[y] >= rightBL[y]) then
			return true
		end
	end
	
	--左オブジェクトの右下が、右オブジェクトの範囲内に入っているかどうか
	--x座標が範囲内か確認
	if (leftBR[x] >= rightBL[x] and leftBR[x] <= rightBR[x]) then
		--y座標が範囲内か確認
		if (leftBR[y] <= rightTR[y] and leftBR[y] >= rightBR[y]) then
			return true
		end
	end

	return false
end

--ホームシーン関数

----コルーチンテスト
--function CallCoroutine()
--	local coro = coroutine.create(LuaMainLoop)
--	coroutine.resume(coro)-- これで、初めて一回実行される
--	coroutine.resume(coro)-- 以降、yieldで止めていた所から再開される
--end
--
--function LuaMainLoop()
--	counter = 0
--	while true do
--		LuaUnityDebugLog(counter)
--		counter = counter + 1
--		coroutine.yield(0)
--	end
--end

